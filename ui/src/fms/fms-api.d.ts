/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/FieldMonitor/MatchNumberAndPlay': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Returns an array of 3 numbers: the current match number, the current
				 *                 play number of that match, and the level of the match. */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': number[];
						'application/json': number[];
						'text/json': number[];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/FieldMonitor/MatchGraphJson': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: {
					matchId?: string;
					alliance?: components['schemas']['AllianceType'];
					station?: components['schemas']['StationType'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['MatchGraphDetailViewModel'][];
						'application/json': components['schemas']['MatchGraphDetailViewModel'][];
						'text/json': components['schemas']['MatchGraphDetailViewModel'][];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/fieldmonitor/get/GetResultsByFMSMatchId/{matchIdParam}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					matchIdParam: string;
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['FieldServerWebMatchViewItem'];
						'application/json': components['schemas']['FieldServerWebMatchViewItem'];
						'text/json': components['schemas']['FieldServerWebMatchViewItem'];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/fieldmonitor/get/GetResultsByTeamNumber/{teamNumberParam}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					teamNumberParam: number;
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['FieldServerWebMatchViewItem'][];
						'application/json': components['schemas']['FieldServerWebMatchViewItem'][];
						'text/json': components['schemas']['FieldServerWebMatchViewItem'][];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/fieldmonitor/get/GetResults/{levelParam}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					levelParam: components['schemas']['TournamentLevel'];
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['FieldServerWebMatchViewItem'][];
						'application/json': components['schemas']['FieldServerWebMatchViewItem'][];
						'text/json': components['schemas']['FieldServerWebMatchViewItem'][];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/fieldmonitor/get/GetLog/{matchIdParam}/{allianceParam}/{stationParam}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					matchIdParam: string;
					allianceParam: components['schemas']['AllianceType'];
					stationParam: components['schemas']['StationType'];
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['FieldServerWebMatchShowLogViewItem'][];
						'application/json': components['schemas']['FieldServerWebMatchShowLogViewItem'][];
						'text/json': components['schemas']['FieldServerWebMatchShowLogViewItem'][];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/fieldmonitor/get/GetPlayoffMatchups/{playoffSizeParam}/{sublevelParam}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					playoffSizeParam: components['schemas']['PlayoffSizeTypes'];
					sublevelParam: components['schemas']['PlayoffLevel'];
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['PitPlayoffMatchup'][];
						'application/json': components['schemas']['PitPlayoffMatchup'][];
						'text/json': components['schemas']['PitPlayoffMatchup'][];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/fieldmonitor/get/GetTournamentLevelStatus/{levelParam}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					levelParam: components['schemas']['TournamentLevel'];
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['LevelStatus'];
						'application/json': components['schemas']['LevelStatus'];
						'text/json': components['schemas']['LevelStatus'];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/fieldmonitor/get/GetPlayoffLevelStatus/{levelParam}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					levelParam: components['schemas']['PlayoffLevel'];
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['LevelStatus'];
						'application/json': components['schemas']['LevelStatus'];
						'text/json': components['schemas']['LevelStatus'];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/fieldmonitor/get/GetCurrentPlayoffLevel': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['PlayoffLevel'];
						'application/json': components['schemas']['PlayoffLevel'];
						'text/json': components['schemas']['PlayoffLevel'];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/fieldmonitor/get/GetNextPlayoffLevel/{playoffLevel}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					playoffLevel: components['schemas']['PlayoffLevel'];
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['PlayoffLevel'];
						'application/json': components['schemas']['PlayoffLevel'];
						'text/json': components['schemas']['PlayoffLevel'];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/fieldmonitor/get/GetPreviousPlayoffLevel/{playoffLevel}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					playoffLevel: components['schemas']['PlayoffLevel'];
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['PlayoffLevel'];
						'application/json': components['schemas']['PlayoffLevel'];
						'text/json': components['schemas']['PlayoffLevel'];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/fieldmonitor/get/GetPlayoffLevelForMatch/{matchNumber}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					matchNumber: number;
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['PlayoffLevel'];
						'application/json': components['schemas']['PlayoffLevel'];
						'text/json': components['schemas']['PlayoffLevel'];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/fieldmonitor/get/TournamentLevelHasPlayableSchedule/{tourneyLevel}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					tourneyLevel: components['schemas']['TournamentLevel'];
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': boolean;
						'application/json': boolean;
						'text/json': boolean;
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/fieldmonitor/get/GetPlayoffMatchGroups': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description A map of match group ID to match group. */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': {
							[key: string]: components['schemas']['MatchGroupView'] | undefined;
						};
						'application/json': {
							[key: string]: components['schemas']['MatchGroupView'] | undefined;
						};
						'text/json': {
							[key: string]: components['schemas']['MatchGroupView'] | undefined;
						};
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/fieldmonitor/get/GetMatchRange/{playoffLevel}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					playoffLevel: components['schemas']['PlayoffLevel'];
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['Int32Int32ValueTuple'];
						'application/json': components['schemas']['Int32Int32ValueTuple'];
						'text/json': components['schemas']['Int32Int32ValueTuple'];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/fieldmonitor/get/GetMatchDescription/{tourneyLevel}/{matchNumber}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					tourneyLevel: components['schemas']['TournamentLevel'];
					matchNumber: number;
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': string;
						'application/json': string;
						'text/json': string;
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/fieldmonitor/get/CountOfMatchesPlayed/{levelParam}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					levelParam: components['schemas']['TournamentLevel'];
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': number;
						'application/json': number;
						'text/json': number;
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/fieldmonitor/get/CountOfRankingsRecords/{levelParam}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					levelParam: components['schemas']['TournamentLevel'];
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': number;
						'application/json': number;
						'text/json': number;
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/fieldmonitor/get/GetCurrentMatchAndPlayNumber/{fieldTypeParam}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					fieldTypeParam: components['schemas']['FieldTypes'];
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['TournamentLevelInt32Int32ValueTuple'];
						'application/json': components['schemas']['TournamentLevelInt32Int32ValueTuple'];
						'text/json': components['schemas']['TournamentLevelInt32Int32ValueTuple'];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/fieldmonitor/get/GetOrMakeFMSScheduleParameterId/{tourneyLevel}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					tourneyLevel: components['schemas']['TournamentLevel'];
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': string;
						'application/json': string;
						'text/json': string;
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/fieldmonitor/get/GetRankings/{eventIdParam}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					eventIdParam: string;
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['RankModel'][];
						'application/json': components['schemas']['RankModel'][];
						'text/json': components['schemas']['RankModel'][];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/fieldmonitor/get/GetAllTeamNumbers': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': number[];
						'application/json': number[];
						'text/json': number[];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/fieldmonitor/get/GetAllAlliances': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['AllianceSelectionEventWizard'][];
						'application/json': components['schemas']['AllianceSelectionEventWizard'][];
						'text/json': components['schemas']['AllianceSelectionEventWizard'][];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/FieldMonitor/Matches/Score': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: {
					matchId?: string;
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/{eventCode}/appUsageData': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					season: number;
					eventCode: string;
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
				/** @description Internal Server Error */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/{eventCode}/eventNotes/{noteId}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: {
					noteId?: string;
				};
				header?: never;
				path: {
					season: number;
					eventCode: string;
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['EventNotesModel'];
						'application/json': components['schemas']['EventNotesModel'];
						'text/json': components['schemas']['EventNotesModel'];
					};
				};
				/** @description Internal Server Error */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		put: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					season: number;
					eventCode: string;
					noteId: string;
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['NoteCreatedUpdatedModel'];
						'application/json': components['schemas']['NoteCreatedUpdatedModel'];
						'text/json': components['schemas']['NoteCreatedUpdatedModel'];
					};
				};
				/** @description Internal Server Error */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		post: {
			parameters: {
				query?: {
					noteId?: string;
				};
				header?: never;
				path: {
					season: number;
					eventCode: string;
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['NoteCreatedUpdatedModel'];
						'application/json': components['schemas']['NoteCreatedUpdatedModel'];
						'text/json': components['schemas']['NoteCreatedUpdatedModel'];
					};
				};
				/** @description Internal Server Error */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		delete: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					season: number;
					eventCode: string;
					noteId: string;
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description No Content */
				204: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
				/** @description Internal Server Error */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/{eventCode}/matchNotes/{noteId}/{tournamentLevel}/{matchNumber}/{playNumber}/{teamNumber}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: {
					noteId?: string;
					tournamentLevel?: string;
					matchNumber?: number;
					playNumber?: number;
					teamNumber?: number;
				};
				header?: never;
				path: {
					season: number;
					eventCode: string;
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['MatchNotesModel'];
						'application/json': components['schemas']['MatchNotesModel'];
						'text/json': components['schemas']['MatchNotesModel'];
					};
				};
				/** @description Internal Server Error */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/{eventCode}/matchNotes/{noteId}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					season: number;
					eventCode: string;
					noteId: string;
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['NoteCreatedUpdatedModel'];
						'application/json': components['schemas']['NoteCreatedUpdatedModel'];
						'text/json': components['schemas']['NoteCreatedUpdatedModel'];
					};
				};
				/** @description Internal Server Error */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		post: {
			parameters: {
				query?: {
					noteId?: string;
				};
				header?: never;
				path: {
					season: number;
					eventCode: string;
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['NoteCreatedUpdatedModel'];
						'application/json': components['schemas']['NoteCreatedUpdatedModel'];
						'text/json': components['schemas']['NoteCreatedUpdatedModel'];
					};
				};
				/** @description Internal Server Error */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		delete: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					season: number;
					eventCode: string;
					noteId: string;
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description No Content */
				204: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
				/** @description Internal Server Error */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/{eventCode}/teamIssues/{noteId}/{teamNumber}/{issueType}/{resolutionStatus}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: {
					noteId?: string;
					teamNumber?: number;
					issueType?: string;
					resolutionStatus?: string;
				};
				header?: never;
				path: {
					season: number;
					eventCode: string;
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['TeamIssuesModel'];
						'application/json': components['schemas']['TeamIssuesModel'];
						'text/json': components['schemas']['TeamIssuesModel'];
					};
				};
				/** @description Internal Server Error */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/{eventCode}/teamIssues/{noteId}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					season: number;
					eventCode: string;
					noteId: string;
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['NoteCreatedUpdatedModel'];
						'application/json': components['schemas']['NoteCreatedUpdatedModel'];
						'text/json': components['schemas']['NoteCreatedUpdatedModel'];
					};
				};
				/** @description Internal Server Error */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		post: {
			parameters: {
				query?: {
					noteId?: string;
				};
				header?: never;
				path: {
					season: number;
					eventCode: string;
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['NoteCreatedUpdatedModel'];
						'application/json': components['schemas']['NoteCreatedUpdatedModel'];
						'text/json': components['schemas']['NoteCreatedUpdatedModel'];
					};
				};
				/** @description Internal Server Error */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		delete: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					season: number;
					eventCode: string;
					noteId: string;
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description No Content */
				204: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
				/** @description Internal Server Error */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/{eventCode}/schedule/{tournamentLevel}/{teamNumber}/{start}/{end}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: {
					teamNumber?: number;
					start?: number;
					end?: number;
				};
				header?: never;
				path: {
					season: number;
					eventCode: string;
					tournamentLevel: string;
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['EventScheduleModel'];
						'application/json': components['schemas']['EventScheduleModel'];
						'text/json': components['schemas']['EventScheduleModel'];
					};
				};
				/** @description Internal Server Error */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/{eventCode}/schedule/hybrid/{tournamentLevel}/{teamNumber}/{start}/{end}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: {
					teamNumber?: number;
					start?: number;
					end?: number;
				};
				header?: never;
				path: {
					season: number;
					eventCode: string;
					tournamentLevel: string;
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['EventScheduleHybridModel'];
						'application/json': components['schemas']['EventScheduleHybridModel'];
						'text/json': components['schemas']['EventScheduleHybridModel'];
					};
				};
				/** @description Internal Server Error */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/{eventCode}/WPA/{teamNumber}/{connectionStatus}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: {
					teamNumber?: number;
					connectionStatus?: string;
				};
				header?: never;
				path: {
					season: number;
					eventCode: string;
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['ConnectionStatusInfoModel'];
						'application/json': components['schemas']['ConnectionStatusInfoModel'];
						'text/json': components['schemas']['ConnectionStatusInfoModel'];
					};
				};
				/** @description Internal Server Error */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/{eventCode}/bypass/{teamNumber}/{tournamentLevel}/{matchNumber}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: {
					teamNumber?: number;
					tournamentLevel?: string;
					matchNumber?: number;
				};
				header?: never;
				path: {
					season: number;
					eventCode: string;
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['BypassStatusInfoModel'];
						'application/json': components['schemas']['BypassStatusInfoModel'];
						'text/json': components['schemas']['BypassStatusInfoModel'];
					};
				};
				/** @description Internal Server Error */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/events/{eventCode}/{teamNumber}/{districtCode}/{excludeDistrict}/{active}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: {
					eventCode?: string;
					teamNumber?: number;
					districtCode?: string;
					excludeDistrict?: boolean;
					active?: boolean;
				};
				header?: never;
				path: {
					season: number;
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['SeasonEventListingsModel'];
						'application/json': components['schemas']['SeasonEventListingsModel'];
						'text/json': components['schemas']['SeasonEventListingsModel'];
					};
				};
				/** @description Internal Server Error */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/teams/{eventCode}/{teamNumber}/{districtCode}/{page}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: {
					eventCode?: string;
					teamNumber?: number;
					districtCode?: string;
					page?: number;
				};
				header?: never;
				path: {
					season: number;
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['SeasonTeamListingsModel'];
						'application/json': components['schemas']['SeasonTeamListingsModel'];
						'text/json': components['schemas']['SeasonTeamListingsModel'];
					};
				};
				/** @description Internal Server Error */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/districts': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					season: number;
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['SeasonDistrictListingsModel'];
						'application/json': components['schemas']['SeasonDistrictListingsModel'];
						'text/json': components['schemas']['SeasonDistrictListingsModel'];
					};
				};
				/** @description Internal Server Error */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					version: number;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['ApiIndexModel'];
						'application/json': components['schemas']['ApiIndexModel'];
						'text/json': components['schemas']['ApiIndexModel'];
					};
				};
				/** @description Internal Server Error */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTAAppApi/CurrentEventStatus': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					version: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['CurrentEventStatus'];
						'application/json': components['schemas']['CurrentEventStatus'];
						'text/json': components['schemas']['CurrentEventStatus'];
					};
				};
				/** @description Internal Server Error */
				500: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/get/GetTournamentLevelStatus/{levelParam}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					levelParam: components['schemas']['TournamentLevel'];
					version: string;
					season: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['LevelStatus'];
						'application/json': components['schemas']['LevelStatus'];
						'text/json': components['schemas']['LevelStatus'];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/get/GetPlayoffLevelStatus/{levelParam}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					levelParam: components['schemas']['PlayoffLevel'];
					version: string;
					season: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['LevelStatus'];
						'application/json': components['schemas']['LevelStatus'];
						'text/json': components['schemas']['LevelStatus'];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/get/GetCurrentPlayoffLevel': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					version: string;
					season: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['PlayoffLevel'];
						'application/json': components['schemas']['PlayoffLevel'];
						'text/json': components['schemas']['PlayoffLevel'];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/get/GetNextPlayoffLevel/{playoffLevel}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					playoffLevel: components['schemas']['PlayoffLevel'];
					version: string;
					season: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['PlayoffLevel'];
						'application/json': components['schemas']['PlayoffLevel'];
						'text/json': components['schemas']['PlayoffLevel'];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/get/GetPreviousPlayoffLevel/{playoffLevel}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					playoffLevel: components['schemas']['PlayoffLevel'];
					version: string;
					season: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['PlayoffLevel'];
						'application/json': components['schemas']['PlayoffLevel'];
						'text/json': components['schemas']['PlayoffLevel'];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/get/GetPlayoffLevelForMatch/{matchNumber}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					matchNumber: number;
					version: string;
					season: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['PlayoffLevel'];
						'application/json': components['schemas']['PlayoffLevel'];
						'text/json': components['schemas']['PlayoffLevel'];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/get/TournamentLevelHasPlayableSchedule/{tourneyLevel}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					tourneyLevel: components['schemas']['TournamentLevel'];
					version: string;
					season: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': boolean;
						'application/json': boolean;
						'text/json': boolean;
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/get/GetPlayoffMatchGroups': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					version: string;
					season: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description A map of match group ID to match group. */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': {
							[key: string]: components['schemas']['MatchGroupView'] | undefined;
						};
						'application/json': {
							[key: string]: components['schemas']['MatchGroupView'] | undefined;
						};
						'text/json': {
							[key: string]: components['schemas']['MatchGroupView'] | undefined;
						};
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/get/GetMatchRange/{playoffLevel}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					playoffLevel: components['schemas']['PlayoffLevel'];
					version: string;
					season: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['Int32Int32ValueTuple'];
						'application/json': components['schemas']['Int32Int32ValueTuple'];
						'text/json': components['schemas']['Int32Int32ValueTuple'];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/get/GetMatchDescription/{tourneyLevel}/{matchNumber}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					tourneyLevel: components['schemas']['TournamentLevel'];
					matchNumber: number;
					version: string;
					season: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': string;
						'application/json': string;
						'text/json': string;
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/get/CountOfMatchesPlayed/{levelParam}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					levelParam: components['schemas']['TournamentLevel'];
					version: string;
					season: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': number;
						'application/json': number;
						'text/json': number;
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/get/CountOfRankingsRecords/{levelParam}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					levelParam: components['schemas']['TournamentLevel'];
					version: string;
					season: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': number;
						'application/json': number;
						'text/json': number;
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/get/GetCurrentMatchAndPlayNumber/{fieldTypeParam}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					fieldTypeParam: components['schemas']['FieldTypes'];
					version: string;
					season: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['TournamentLevelInt32Int32ValueTuple'];
						'application/json': components['schemas']['TournamentLevelInt32Int32ValueTuple'];
						'text/json': components['schemas']['TournamentLevelInt32Int32ValueTuple'];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/get/GetOrMakeFMSScheduleParameterId/{tourneyLevel}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					tourneyLevel: components['schemas']['TournamentLevel'];
					version: string;
					season: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': string;
						'application/json': string;
						'text/json': string;
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/get/GetRankings/{eventIdParam}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					eventIdParam: string;
					version: string;
					season: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['RankModel'][];
						'application/json': components['schemas']['RankModel'][];
						'text/json': components['schemas']['RankModel'][];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/get/GetAllTeamNumbers': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					version: string;
					season: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': number[];
						'application/json': number[];
						'text/json': number[];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/v{version}/FTA/{season}/get/GetAllAlliances': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					version: string;
					season: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'text/plain': components['schemas']['AllianceSelectionEventWizard'][];
						'application/json': components['schemas']['AllianceSelectionEventWizard'][];
						'text/json': components['schemas']['AllianceSelectionEventWizard'][];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/api/{controller}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					controller: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		put?: never;
		post: {
			parameters: {
				query?: never;
				header?: never;
				path: {
					controller: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description OK */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content?: never;
				};
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/hubs/FieldMonitorEvents/MatchStatusInfoChanged': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: {
					matchStatusInfoChangedParam?: components['schemas']['MatchStatusInfo'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: never;
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/hubs/FieldMonitorEvents/FieldMonitorDataChanged': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: {
					dataParam?: components['schemas']['FieldMonitorData'][];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: never;
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/hubs/FieldMonitorEvents/ScheduleAheadBehindChanged': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: {
					aheadBehindParam?: string;
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: never;
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/hubs/FTAAppEvents/NoteChanged': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: {
					data?: components['schemas']['EventNoteChange'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: never;
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/hubs/FTAAppEvents/MatchStatusInfoChanged': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: {
					matchStatusInfoChangedParam?: components['schemas']['MatchStatusInfo'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: never;
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		AllianceSelectionEventWizard: {
			/** Format: uuid */
			fmsEventId?: string;
			/** Format: int32 */
			number?: number;
			name?: string | null;
			substituteButtonEnabled?: boolean;
			captainTeamNumberRaw?: string | null;
			/** Format: int32 */
			captainTeamNumber?: number | null;
			/** Format: int32 */
			captainTeamNumberHold?: number | null;
			captainSubstituteChecked?: boolean;
			captainFlag?: boolean;
			/** Format: int32 */
			captainTabIndex?: number;
			round1TeamNumberRaw?: string | null;
			/** Format: int32 */
			round1TeamNumber?: number | null;
			/** Format: int32 */
			round1TeamNumberHold?: number | null;
			round1SubstituteChecked?: boolean;
			round1Flag?: boolean;
			/** Format: int32 */
			round1TabIndex?: number;
			round2TeamNumberRaw?: string | null;
			/** Format: int32 */
			round2TeamNumber?: number | null;
			/** Format: int32 */
			round2TeamNumberHold?: number | null;
			round2SubstituteChecked?: boolean;
			round2Flag?: boolean;
			/** Format: int32 */
			round2TabIndex?: number;
			round3TeamNumberRaw?: string | null;
			/** Format: int32 */
			round3TeamNumberHold?: number | null;
			round3SubstituteChecked?: boolean;
			/** Format: int32 */
			round3TeamNumber?: number | null;
			round3Enabled?: boolean;
			round3Flag?: boolean;
			showUndoSubstitution?: boolean;
		};
		/**
		 * Format: int32
		 * @description The color assigned to a particular alliance.
		 * @enum {integer}
		 */
		AllianceType: AllianceType;
		/** @description FTA Notepad: API Index */
		ApiIndexModel: {
			name?: string | null;
			apiVersion?: string | null;
			serviceMainifestName?: string | null;
			serviceMainifestVersion?: string | null;
			codePackageName?: string | null;
			codePackageVersion?: string | null;
			status?: string | null;
			/** Format: int32 */
			currentSeason?: number;
			/** Format: int32 */
			maxSeason?: number;
		};
		/**
		 * Format: int32
		 * @enum {integer}
		 */
		BWUtilizationType: BWUtilizationType;
		/**
		 * Format: int32
		 * @description Identifies which bracket a match group is part of, for head-to-head match groups.
		 * @enum {integer}
		 */
		Bracket: Bracket;
		BypassStatusInfoModel: {
			teamBypasses?: components['schemas']['BypassStatusInfoTeamModel'][] | null;
		};
		BypassStatusInfoTeamModel: {
			/** Format: int32 */
			teamNumber?: number;
			/** Format: int32 */
			matchNumber?: number;
			tournamentLevel?: string | null;
		};
		ConnectionStatusInfoModel: {
			teamStatuses?: components['schemas']['ConnectionStatusInfoTeamModel'][] | null;
		};
		ConnectionStatusInfoTeamModel: {
			/** Format: int32 */
			teamNumber?: number;
			wpaKeyExists?: boolean;
			wpaKeyStatus?: string | null;
		};
		CurrentEventStatus: {
			eventActive?: boolean;
			eventCode?: string | null;
			/** Format: uuid */
			fmsEventId?: string;
			tournamentLevel?: components['schemas']['TournamentLevel'];
		};
		/**
		 * Format: int32
		 * @enum {integer}
		 */
		DSStationStatus: DSStationStatus;
		EventNoteChange: {
			noteType?: components['schemas']['EventNoteTypes'] & unknown;
			/**
			 * Format: uuid
			 * @description MessagePack Key: p2
			 */
			fmsNoteId?: string;
			/**
			 * Format: int64
			 * @description MessagePack Key: p3
			 */
			recordVersion?: number | null;
			type?: components['schemas']['EventNoteChangeTypes'] & unknown;
			/** @description MessagePack Key: p5 */
			fmsDeviceIdentification?: string | null;
			/**
			 * Format: date-time
			 * @description MessagePack Key: p6
			 */
			currentTimeStamp?: string;
			/**
			 * Format: date-time
			 * @description MessagePack Key: p7
			 */
			previousTimeStamp?: string | null;
		};
		/**
		 * Format: int32
		 * @enum {integer}
		 */
		EventNoteChangeTypes: EventNoteChangeTypes;
		/** @description FTA Notepad: FTA EventNote */
		EventNoteModel: {
			note?: string | null;
			/** Format: uuid */
			noteId?: string;
			/** Format: date-time */
			timeAdded?: string | null;
			/** Format: date-time */
			timeUpdated?: string | null;
			isDeleted?: boolean;
			whoAdded?: string | null;
			whoUpdated?: string | null;
			/** Format: int64 */
			recordVersion?: number;
		};
		/**
		 * Format: int32
		 * @enum {integer}
		 */
		EventNoteTypes: EventNoteTypes;
		EventNotesModel: {
			eventNotes?: components['schemas']['EventNoteModel'][] | null;
			/** Format: int32 */
			noteCount?: number;
		};
		EventScheduleHybridModel: {
			schedule?: components['schemas']['ScheduleHybridModel'][] | null;
		};
		EventScheduleModel: {
			schedule?: components['schemas']['ScheduledMatchModel'][] | null;
		};
		FieldMonitorData: {
			alliance?: components['schemas']['AllianceType'] & unknown;
			station?: components['schemas']['StationType'] & unknown;
			/**
			 * Format: int32
			 * @description MessagePack Key: p3
			 */
			teamNumber?: number;
			/** @description MessagePack Key: p4 */
			connection?: boolean;
			/** @description MessagePack Key: p5 */
			linkActive?: boolean;
			/** @description MessagePack Key: p6 */
			dsLinkActive?: boolean;
			/** @description MessagePack Key: p7 */
			radioLink?: boolean;
			/** @description MessagePack Key: p8 */
			rioLink?: boolean;
			/** @description MessagePack Key: p9 */
			isEnabled?: boolean;
			/** @description MessagePack Key: pa */
			isAuto?: boolean;
			/** @description MessagePack Key: pb */
			isBypassed?: boolean;
			/** @description MessagePack Key: pc */
			isEStopPressed?: boolean;
			/** @description MessagePack Key: pd */
			isEStopped?: boolean;
			/**
			 * Format: double
			 * @description MessagePack Key: pe
			 */
			battery?: number;
			monitorStatus?: components['schemas']['MonitorStatusType'] & unknown;
			/**
			 * Format: int32
			 * @description MessagePack Key: pg
			 */
			averageTripTime?: number;
			/**
			 * Format: int32
			 * @description MessagePack Key: ph
			 */
			lostPackets?: number;
			/**
			 * Format: int32
			 * @description MessagePack Key: pi
			 */
			signal?: number | null;
			/**
			 * Format: int32
			 * @description MessagePack Key: pj
			 */
			noise?: number | null;
			/** Format: int32 */
			snr?: number;
			/**
			 * Format: int32
			 * @description MessagePack Key: pl
			 */
			inactivity?: number;
			macAddress?: string | null;
			/**
			 * Format: double
			 * @description MessagePack Key: pn
			 */
			txRate?: number | null;
			/**
			 * Format: int32
			 * @description MessagePack Key: po
			 */
			txMCS?: number | null;
			/**
			 * Format: int32
			 * @description MessagePack Key: pp
			 */
			txMCSBandWidth?: number | null;
			/** @description MessagePack Key: pq */
			txVHT?: boolean | null;
			/**
			 * Format: int32
			 * @description MessagePack Key: pr
			 */
			txVHTNSS?: number | null;
			/**
			 * Format: int32
			 * @description MessagePack Key: ps
			 */
			txPackets?: number;
			/**
			 * Format: double
			 * @description MessagePack Key: pt
			 */
			rxRate?: number | null;
			/**
			 * Format: int32
			 * @description MessagePack Key: pu
			 */
			rxMCS?: number | null;
			/**
			 * Format: int32
			 * @description MessagePack Key: pv
			 */
			rxMCSBandWidth?: number | null;
			/** @description MessagePack Key: pw */
			rxVHT?: boolean | null;
			/**
			 * Format: int32
			 * @description MessagePack Key: px
			 */
			rxVHTNSS?: number | null;
			/**
			 * Format: int32
			 * @description MessagePack Key: py
			 */
			rxPackets?: number;
			/**
			 * Format: double
			 * @description MessagePack Key: pz
			 */
			dataRateTotal?: number;
			/**
			 * Format: double
			 * @description MessagePack Key: paa
			 */
			dataRateToRobot?: number;
			/**
			 * Format: double
			 * @description MessagePack Key: pbb
			 */
			dataRateFromRobot?: number;
			bwUtilization?: components['schemas']['BWUtilizationType'];
			wpaKeyStatus?: components['schemas']['WPAKeyStatusType'];
			/** @description MessagePack Key: pee */
			driverStationIsOfficial?: boolean;
			stationStatus?: components['schemas']['DSStationStatus'] & unknown;
			/** @description MessagePack Key: pgg */
			brownout?: boolean;
			/** @description MessagePack Key: phh */
			eStopSource?: string | null;
			/** @description MessagePack Key: pii */
			isAStopPressed?: boolean;
			/** @description MessagePack Key: pjj */
			isAStopped?: boolean;
			/** @description MessagePack Key: pjk */
			moveToStation?: string | null;
			/** @description MessagePack Key: pk */
			sNR?: unknown;
			/** @description MessagePack Key: pm */
			mACAddress?: unknown;
			/** @description MessagePack Key: pcc */
			bWUtilization?: unknown;
			/** @description MessagePack Key: pdd */
			wPAKeyStatus?: unknown;
		};
		FieldServerWebMatchShowLogViewItem: {
			/** Format: date-time */
			timeStamp?: string;
			/** Format: double */
			matchTimeBase?: number;
			/** Format: int32 */
			matchTime?: number;
			auto?: boolean;
			dsLinkActive?: boolean;
			enabled?: boolean;
			aStopPressed?: boolean;
			eStopPressed?: boolean;
			linkActive?: boolean;
			radioLink?: boolean;
			rioLink?: boolean;
			/** Format: int32 */
			averageTripTime?: number;
			/** Format: int32 */
			lostPackets?: number;
			/** Format: int32 */
			sentPackets?: number;
			/** Format: double */
			battery?: number;
			brownout?: boolean;
			/** Format: int32 */
			signal?: number | null;
			/** Format: int32 */
			noise?: number | null;
			/** Format: int32 */
			snr?: number;
			/** Format: double */
			txRate?: number | null;
			/** Format: int32 */
			txMCS?: number | null;
			/** Format: double */
			rxRate?: number | null;
			/** Format: int32 */
			rxMCS?: number | null;
			/** Format: double */
			dataRateTotal?: number;
		};
		FieldServerWebMatchViewItem: {
			/** Format: uuid */
			fmsMatchId?: string;
			tournamentLevel?: components['schemas']['TournamentLevel'];
			/** Format: uuid */
			fmsEventId?: string;
			/** Format: date-time */
			startTime?: string;
			/** Format: date-time */
			actualStartTime?: string;
			description?: string | null;
			/** Format: int32 */
			dayNumber?: number;
			/** Format: int32 */
			matchNumber?: number;
			/** Format: int32 */
			playNumber?: number;
			/** Format: int32 */
			teamNumberBlue1?: number | null;
			/** Format: int32 */
			teamNumberBlue2?: number | null;
			/** Format: int32 */
			teamNumberBlue3?: number | null;
			/** Format: int32 */
			teamNumberRed1?: number | null;
			/** Format: int32 */
			teamNumberRed2?: number | null;
			/** Format: int32 */
			teamNumberRed3?: number | null;
		};
		/**
		 * Format: int32
		 * @description for multi field events
		 *     Primary - Main FMS with all functionality enabled
		 *     Secondary - Match Play, Match Test, Match Review, Field Test, System Configuration
		 *     Practice - Match Test, Field Test, System Configuration
		 *     We start the numbering at 1 since the field "number" is referenced around the solution
		 * @enum {integer}
		 */
		FieldTypes: FieldTypes;
		Int32Int32ValueTuple: Record<string, never>;
		/**
		 * Format: int32
		 * @description The current status of a tournament level.
		 * @enum {integer}
		 */
		LevelStatus: LevelStatus;
		MatchGraphDetailViewModel: {
			auto?: boolean;
			/** Format: double */
			matchTime?: number;
			/** Format: double */
			averageRoundTrip?: number;
			/** Format: double */
			battery?: number;
			/** Format: double */
			dataRateTotal?: number;
			/** Format: int32 */
			signal?: number | null;
			/** Format: int32 */
			noise?: number | null;
		};
		/**
		 * Format: int32
		 * @enum {integer}
		 */
		MatchGroupType: MatchGroupType;
		MatchGroupView: {
			id?: string | null;
			type?: components['schemas']['MatchGroupType'];
			playoffLevel?: components['schemas']['PlayoffLevel'];
			matchNumbers?: number[] | null;
			isComplete?: boolean;
			winnersNextRoundIsByeRound?: boolean;
			/** Format: int32 */
			redAlliance?: number | null;
			/** Format: int32 */
			blueAlliance?: number | null;
			/** Format: int32 */
			matchesPlayed?: number;
			/** Format: int32 */
			redWins?: number;
			/** Format: int32 */
			blueWins?: number;
			bracket?: components['schemas']['Bracket'];
			currentRankings?: components['schemas']['RankedAlliance'][] | null;
		};
		/** @description FTA Notepad: FTA MatchNote */
		MatchNoteModel: {
			note?: string | null;
			/** Format: uuid */
			noteId?: string;
			tournamentLevel?: string | null;
			/** Format: int32 */
			matchNumber?: number;
			/** Format: int32 */
			playNumber?: number;
			/** Format: int32 */
			teamNumber?: number | null;
			/** Format: date-time */
			timeAdded?: string | null;
			/** Format: date-time */
			timeUpdated?: string | null;
			isDeleted?: boolean;
			whoAdded?: string | null;
			whoUpdated?: string | null;
			/** Format: int64 */
			recordVersion?: number;
		};
		MatchNotesModel: {
			matchNotes?: components['schemas']['MatchNoteModel'][] | null;
			/** Format: int32 */
			noteCount?: number;
		};
		/**
		 * Format: int32
		 * @enum {integer}
		 */
		MatchStateType: MatchStateType;
		MatchStatusInfo: {
			matchState?: components['schemas']['MatchStateType'] & unknown;
			/**
			 * Format: int32
			 * @description MessagePack Key: p2
			 */
			matchNumber?: number;
			/**
			 * Format: int32
			 * @description MessagePack Key: p3
			 */
			playNumber?: number;
			level?: components['schemas']['TournamentLevel'] & unknown;
		};
		/**
		 * Format: int32
		 * @enum {integer}
		 */
		MonitorStatusType: MonitorStatusType;
		/** @description FTA Notepad: Response upon successful note creation */
		NoteCreatedUpdatedModel: {
			/** Format: uuid */
			noteId?: string;
			/** Format: int64 */
			recordVersion?: number;
		};
		PitPlayoffMatchup: {
			/** Format: int32 */
			redAllianceNumber?: number;
			/** Format: int32 */
			blueAllianceNumber?: number;
			redAllianceTeams?: string | null;
			blueAllianceTeams?: string | null;
			/** Format: int32 */
			redAllianceWins?: number;
			/** Format: int32 */
			blueAllianceWins?: number;
		};
		/**
		 * Format: int32
		 * @description PlayoffLevel represents a phase of the FMS.Common.Base.Enums.TournamentLevel.Playoff level of the tournament.
		 *
		 *     Invariants at a level:
		 *     * at least one match is played
		 *     * Pairings: for single and double elimination, an alliance is paired with exactly one other
		 *       alliance in a level.  For a round robin tournament, the round robin section would
		 *       be treated as one level with alliances paired with >1 other alliance.
		 *     * An alliance is not required to appear in a level.
		 * @enum {integer}
		 */
		PlayoffLevel: PlayoffLevel;
		/**
		 * Format: int32
		 * @description The permitted alliance counts of playoffs
		 * @enum {integer}
		 */
		PlayoffSizeTypes: PlayoffSizeTypes;
		RankModel: {
			/** Format: int32 */
			rank?: number;
			/** Format: int32 */
			team?: number;
			/** Format: int32 */
			wins?: number;
			/** Format: int32 */
			losses?: number;
			/** Format: int32 */
			ties?: number;
			/** Format: double */
			rs?: number;
			/** Format: double */
			avgScore?: number;
			/** Format: int32 */
			played?: number;
			/** Format: double */
			dq?: number;
			/** Format: double */
			sort1?: number;
			/** Format: double */
			sort2?: number;
			/** Format: double */
			sort3?: number;
			/** Format: double */
			sort4?: number;
			/** Format: double */
			sort5?: number;
			/** Format: double */
			sort6?: number;
		};
		RankedAlliance: {
			/** Format: int32 */
			readonly rank?: number;
			readonly isTied?: boolean;
			/** Format: int32 */
			readonly allianceNumber?: number;
			/** Format: int32 */
			readonly matchesPlayed?: number;
			/** Format: int32 */
			readonly wins?: number;
			/** Format: int32 */
			readonly losses?: number;
			/** Format: int32 */
			readonly ties?: number;
			/** Format: double */
			readonly averageRankingPoints?: number;
			readonly averageTiebreakers?: number[] | null;
		};
		ScheduleHybridModel: {
			description?: string | null;
			tournamentLevel?: string | null;
			/** Format: int32 */
			matchNumber?: number;
			/** Format: date-time */
			startTime?: string | null;
			/** Format: date-time */
			actualStartTime?: string | null;
			/** Format: date-time */
			postResultTime?: string | null;
			/** Format: int32 */
			scoreRedFinal?: number | null;
			/** Format: int32 */
			scoreRedFoul?: number | null;
			/** Format: int32 */
			scoreRedAuto?: number | null;
			/** Format: int32 */
			scoreBlueFinal?: number | null;
			/** Format: int32 */
			scoreBlueFoul?: number | null;
			/** Format: int32 */
			scoreBlueAuto?: number | null;
			teams?: components['schemas']['ScheduleHybridModelTeam'][] | null;
		};
		ScheduleHybridModelTeam: {
			/** Format: int32 */
			teamNumber?: number | null;
			station?: string | null;
			surrogate?: boolean;
			dq?: boolean | null;
		};
		ScheduledMatchModel: {
			field?: string | null;
			description?: string | null;
			level?: string | null;
			/** Format: date-time */
			startTime?: string | null;
			/** Format: int32 */
			matchNumber?: number;
			teams?: components['schemas']['ScheduledMatchTeamModel'][] | null;
		};
		ScheduledMatchTeamModel: {
			/** Format: int32 */
			teamNumber?: number | null;
			station?: string | null;
			surrogate?: boolean;
		};
		SeasonDistrictListingsModel: {
			districts?: components['schemas']['SeasonDistrictModel'][] | null;
			/** Format: int32 */
			districtCount?: number;
		};
		SeasonDistrictModel: {
			code?: string | null;
			name?: string | null;
		};
		SeasonEventListingsModel: {
			events?: components['schemas']['SeasonEventModel'][] | null;
			/** Format: int32 */
			eventCount?: number;
		};
		SeasonEventModel: {
			code?: string | null;
			divisionCode?: string | null;
			name?: string | null;
			type?: string | null;
			districtCode?: string | null;
			venue?: string | null;
			address?: string | null;
			city?: string | null;
			stateprov?: string | null;
			country?: string | null;
			website?: string | null;
			webcasts?: string[] | null;
			timezone?: string | null;
			/** Format: date-time */
			dateStart?: string;
			/** Format: date-time */
			dateEnd?: string;
		};
		SeasonTeamListingsModel: {
			teams?: components['schemas']['SeasonTeamModel'][] | null;
			/** Format: int32 */
			teamCountTotal?: number;
			/** Format: int32 */
			teamCountPage?: number;
			/** Format: int32 */
			pageCurrent?: number;
			/** Format: int32 */
			pageTotal?: number;
		};
		SeasonTeamModel: {
			/** Format: int32 */
			teamNumber?: number;
			nameFull?: string | null;
			nameShort?: string | null;
			schoolName?: string | null;
			city?: string | null;
			stateProv?: string | null;
			country?: string | null;
			website?: string | null;
			/** Format: int32 */
			rookieYear?: number | null;
			robotName?: string | null;
			districtCode?: string | null;
			homeCMP?: string | null;
		};
		/**
		 * Format: int32
		 * @description The names of the driver station positions
		 * @enum {integer}
		 */
		StationType: StationType;
		/** @description FTA Notepad: FTA TeamIssues */
		TeamIssueModel: {
			note?: string | null;
			/** Format: uuid */
			noteId?: string;
			tournamentLevel?: string | null;
			/** Format: int32 */
			matchNumber?: number;
			/** Format: int32 */
			playNumber?: number;
			/** Format: int32 */
			teamNumber?: number;
			issueType?: string | null;
			resolutionStatus?: string | null;
			/** Format: date-time */
			timeAdded?: string | null;
			/** Format: date-time */
			timeUpdated?: string | null;
			isDeleted?: boolean;
			whoAdded?: string | null;
			whoUpdated?: string | null;
			/** Format: int64 */
			recordVersion?: number;
		};
		TeamIssuesModel: {
			teamIssues?: components['schemas']['TeamIssueModel'][] | null;
			/** Format: int32 */
			noteCount?: number;
		};
		/**
		 * Format: int32
		 * @description The level of the tournament (practice, quals, etc)
		 * @enum {integer}
		 */
		TournamentLevel: TournamentLevel;
		TournamentLevelInt32Int32ValueTuple: Record<string, never>;
		/**
		 * Format: int32
		 * @enum {integer}
		 */
		WPAKeyStatusType: WPAKeyStatusType;
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export enum AllianceType {
	None = 0,
	Red = 1,
	Blue = 2
}
export enum BWUtilizationType {
	Low = 0,
	Medium = 1,
	High = 2,
	VeryHigh = 3
}
export enum Bracket {
	Single = 0,
	DoubleUpper = 1,
	DoubleLower = 2
}
export enum DSStationStatus {
	Good = 0,
	MoveStation = 1,
	Waiting = 2,
	Unknown = 3
}
export enum EventNoteChangeTypes {
	Create = 1,
	Update = 2,
	Delete = 3
}
export enum EventNoteTypes {
	FTAEvent = 1,
	FTAMatch = 2,
	FTATeamIssue = 3,
	FTAAppUsageData = 4,
	FTATeam = 5,
	FMSAllianceTimeout = 10,
	FMSMatchMaker = 11,
	Staff = 15
}
export enum FieldTypes {
	Primary = 1,
	Secondary = 2,
	Practice = 3
}
export enum LevelStatus {
	NoCurrentlySelectedEvent = 0,
	NotScheduled = 1,
	NotStarted = 2,
	InProgress = 3,
	Completed = 4
}
export enum MatchGroupType {
	HeadToHeadMatchup = 0,
	RankedPool = 1
}
export enum MatchStateType {
	NoCurrentlyActiveEvent = 0,
	NoCurrentlyActiveTournamentLevel = 1,
	WaitingForPrestart = 2,
	WaitingForPrestartTO = 3,
	Prestarting = 4,
	PrestartingTO = 5,
	WaitingForSetAudience = 6,
	WaitingForSetAudienceTO = 7,
	WaitingForMatchReady = 8,
	WaitingForMatchStart = 9,
	GameSpecificData = 10,
	MatchAuto = 11,
	MatchTransition = 12,
	MatchTeleop = 13,
	WaitingForCommit = 14,
	WaitingForPostResults = 15,
	TournamentLevelComplete = 16,
	MatchCancelled = 17,
	WaitingForMatchPreview = 18,
	WaitingForMatchPreviewTO = 19
}
export enum MonitorStatusType {
	Unknown = 0,
	EStopped = 1,
	AStopped = 2,
	DisabledAuto = 3,
	DisabledTeleop = 4,
	EnabledAuto = 5,
	EnabledTeleop = 6
}
export enum PlayoffLevel {
	Final = 0,
	Level2 = 1,
	Level3 = 2,
	Level4 = 3,
	Level5 = 4,
	Level6 = 5,
	Level7 = 6
}
export enum PlayoffSizeTypes {
	TwoAlliance = 2,
	FourAlliance = 4,
	FiveAlliance = 5,
	SixAlliance = 6,
	SevenAlliance = 7,
	EightAlliance = 8,
	SixteenAlliance = 16
}
export enum StationType {
	None = 0,
	Station1 = 1,
	Station2 = 2,
	Station3 = 3
}
export enum TournamentLevel {
	Match_Test = 0,
	Practice = 1,
	Qualification = 2,
	Playoff = 3
}
export enum WPAKeyStatusType {
	NotTested = 0,
	UsedInConnectionTest = 1,
	UsedInMatch = 2
}
export type operations = Record<string, never>;
